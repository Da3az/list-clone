// import Head from 'next/head'
// import Image from 'next/image'
import { GetServerSideProps } from 'next'

import styles from '../styles/Home.module.css'
import Head from 'next/head'
import Image from 'next/image'  
import Header from '../components/Header';
import Nav from '../components/Nav';
import Results from '../components/Results';
import {requests} from '../utils/requests';
import getUrl from '../utils/requests';

import {useSelector} from 'react-redux'

interface IhomeInput{
  genre:string,
  results:any
}

interface Istate{
  dark:Boolean
}

export default function Home({results, genre}:IhomeInput) {
  
  const dark = useSelector(function(state:Istate){return state.dark})

  console.log(results)

  return (
      <div className={dark && 'dark' }>
        <div className='dark:bg-hulu_ bg-white flex flex-col justify-center items-center w-10/10 text-gray ' >
          {console.log(results)}
          <Head>
            <title>Hulu Clone</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Header />
          <Nav genre = {genre} />
          <Results results={results}/>      
        </div>
      </div>   
  )
}


// export default function Home({results, genre}) {
//   return (
//     <div className="text-gray-300">
//       <Head>
//         <title>Hulu 2.0</title>
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <Header />
//       <Nav genre={genre}/>
//       <Results results={results}/>
//     </div>
//   )
// }

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const genre = context.query.genre?.toString()
  
//   const request = typeof genre === 'string' ? await fetch(`https://api.themoviedb.org/3${requests[genre]?.url}`) : await fetch(`https://api.themoviedb.org/3${requests[genre]?.urlrequests.fetchTrending.url}`)
//     .then(res=>res.json());
//     // console.log('results ====>',request)    
//     return {
//       props: {
//         results: request.results,
//         genre: context?.query?.genre ? context?.query?.genre : null
//       }
//     }
      
// }

export const getServerSideProps: GetServerSideProps = async (context) => {
  const fetchName = context.query.genre?.toString()
  let props = await getUrl(fetchName)
     // console.log('results ====>',request)    
    return {
      props
    }
      
}